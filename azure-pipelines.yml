trigger:
  branches:
    include:
    - main
    - qas
  paths:
    exclude:
    - README.md
    - '*.md'
    - docs/*

pr:
  branches:
    include:
    - main
    - qas

variables:
  - name: aws.rolecredential.maxduration
    value: "3600"
  - name: buildConfiguration
    value: 'Release'
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: lambdaFunctionName
    value: 'lambda-customer-validation-accounts'

  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      - group: plataformakd-prd

  - ${{ if eq(variables['Build.SourceBranchName'], 'qas') }}:
      - group: plataformakd-qas

stages:
- stage: BuildAndDeploy
  displayName: 'Build and Deploy Lambda'
  condition: or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'qas'))
  jobs:
  - job: LambdaBuildAndDeploy
    displayName: 'Build and Deploy AWS Lambda'
    timeoutInMinutes: "5"
    cancelTimeoutInMinutes: "5"
    pool:
      vmImage: $(vmImageName)
    steps:
    
    - task: UseDotNet@2
      displayName: 'Install .NET 8.0 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        includePreviewVersions: false

    - task: NuGetAuthenticate@1
      displayName: 'Authenticate with Azure Artifacts'
      inputs:
        nuGetServiceConnections: 'SCNuget'
        forceReinstallCredentialProvider: true

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: 'KD.Function.Customer.ValidationAccounts.sln'
        feedsToUse: 'config'
        nugetConfigPath: 'nuget.config'
        includeNuGetOrg: true

    - task: DotNetCoreCLI@2
      displayName: 'Build Lambda function'
      inputs:
        command: 'build'
        projects: 'KD.Function.Customer.ValidationAccounts.sln'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Lambda function'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/KD.Function.Customer.ValidationAccounts/KD.Function.Customer.ValidationAccounts.csproj'
        arguments: '-c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/lambda-package --no-restore --no-build'
        zipAfterPublish: false
    - task: PowerShell@2
      displayName: 'Verify Lambda Package Contents'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "üì¶ Verifying Lambda deployment package contents..."
          $packagePath = "$(Build.ArtifactStagingDirectory)/lambda-package"
          $actualPath = "$packagePath/KD.Function.Customer.ValidationAccounts"

          # Check directory structure
          Write-Host "Directory structure in $packagePath..."
          Get-ChildItem -Path $packagePath -Recurse | Select-Object Name, FullName | Format-Table

          Write-Host "Checking actual Lambda files in $actualPath..."
          if (Test-Path $actualPath) {
            Get-ChildItem -Path $actualPath | Select-Object Name, FullName | Format-Table
          }

          # Verify .deps.json exists in the actual path
          $depsFile = Get-ChildItem -Path $actualPath -Filter "*.deps.json" -ErrorAction SilentlyContinue
          if ($depsFile) {
            Write-Host "‚úÖ Found .deps.json file: $($depsFile.FullName)"
          } else {
            Write-Error "‚ùå Missing .deps.json file in $actualPath!"
            exit 1
          }

          # Verify main DLL exists
          $dllFile = Get-ChildItem -Path $actualPath -Filter "*.dll" -ErrorAction SilentlyContinue | Where-Object { $_.Name -like "*ValidationAccounts*" }
          if ($dllFile) {
            Write-Host "‚úÖ Found main DLL: $($dllFile.FullName)"
          } else {
            Write-Error "‚ùå Missing main DLL file in $actualPath!"
            exit 1
          }

    - task: ArchiveFiles@2
      displayName: 'Create Lambda ZIP Package'
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/lambda-package/KD.Function.Customer.ValidationAccounts'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(lambdaFunctionName)-$(Build.BuildId).zip'
        replaceExistingArchive: true
        verbose: true

    - task: AWSShellScript@1
      displayName: 'Deploy Lambda Function to AWS'
      inputs:
        awsCredentials: $(serviceConnection)
        regionName: $(AWS_REGION)
        scriptType: inline
        inlineScript: |
          echo "üöÄ Deploying Lambda function to AWS..."

          # Deploy the Lambda function
          ZIP_FILE="$(Build.ArtifactStagingDirectory)/$(lambdaFunctionName)-$(Build.BuildId).zip"
          echo "Deploying with zip file: $ZIP_FILE"

          aws lambda update-function-code \
            --function-name $(lambdaFunctionName) \
            --zip-file "fileb://$ZIP_FILE" \
            --region $(AWS_REGION)

          echo "‚úÖ Lambda function deployed successfully!"
