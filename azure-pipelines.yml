trigger:
  branches:
    include:
    - main
    - qas
  paths:
    exclude:
    - README.md
    - '*.md'
    - docs/*

pr:
  branches:
    include:
    - main
    - qas

variables:
  - name: aws.rolecredential.maxduration
    value: "3600"
  - name: buildConfiguration
    value: 'Release'
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: lambdaFunctionName
    value: 'lambda-customer-validation-accounts'

  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
      - group: plataformakd-prd

  - ${{ if eq(variables['Build.SourceBranchName'], 'qas') }}:
      - group: plataformakd-qas

stages:
- stage: BuildAndDeploy
  displayName: 'Build and Deploy Lambda'
  condition: or(eq(variables['Build.SourceBranchName'], 'main'), eq(variables['Build.SourceBranchName'], 'qas'))
  jobs:
  - job: LambdaBuildAndDeploy
    displayName: 'Build and Deploy AWS Lambda'
    timeoutInMinutes: "5"
    cancelTimeoutInMinutes: "5"
    pool:
      vmImage: $(vmImageName)
    steps:
    
    # Limpar cache antigo
    - task: Bash@3
      displayName: 'Clear NuGet Cache'
      inputs:
        targetType: 'inline'
        script: |
          dotnet nuget locals all --clear

    # Autentica√ß√£o nativa
    - task: NuGetAuthenticate@1
      displayName: 'Authenticate with Azure Artifacts'
      inputs:
        nuGetServiceConnections: 'SCNuget'
        forceReinstallCredentialProvider: true

    # Usar tasks nativas do Azure DevOps
    - task: UseDotNet@2
      displayName: 'Install .NET SDK 8.0'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'

    # Tentativa 1: Restore nativo
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages (Native)'
      inputs:
        command: 'restore'
        projects: 'KD.Function.Customer.ValidationAccounts.sln'
        feedsToUse: 'select'
        vstsFeed: 'KDUtils_Feed,KDutils_feed_aws'
        includeNuGetOrg: true
        verbosityRestore: 'Normal'
      continueOnError: true

    # Fallback: Se falhar, usar configura√ß√£o manual
    - task: Bash@3
      displayName: 'Fallback: Manual Source Configuration'
      condition: failed()
      inputs:
        targetType: 'inline'
        script: |
          echo "‚ö†Ô∏è Native restore failed, trying manual configuration..."
          
          dotnet nuget add source "https://pkgs.dev.azure.com/COMERCIALAUTOMOTIVA/PlataformaKD/_packaging/KDUtils_Feed/nuget/v3/index.json" \
            --name "KDUtils_Feed"
          
          dotnet nuget add source "https://pkgs.dev.azure.com/COMERCIALAUTOMOTIVA/PlataformaKD-AWS/_packaging/KDutils_feed_aws/nuget/v3/index.json" \
            --name "KDutils_feed_aws"
          
          dotnet restore KD.Function.Customer.ValidationAccounts.sln --force

    # Build normalmente
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: 'KD.Function.Customer.ValidationAccounts.sln'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # Publish Lambda
    - task: DotNetCoreCLI@2
      displayName: 'Publish Lambda Function'
      inputs:
        command: 'publish'
        projects: 'src/KD.Function.Customer.ValidationAccounts/KD.Function.Customer.ValidationAccounts.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)/lambda-package'
    
    # Package and Deploy Lambda
    - task: Bash@3
      displayName: 'Package and Deploy Lambda to AWS'
      inputs:
        targetType: 'inline'
        script: |
          echo "üì¶ Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version
          
          echo "üì¶ Creating Lambda deployment package..."
          cd $(Build.ArtifactStagingDirectory)/lambda-package
          zip -r ../$(lambdaFunctionName)-$(Build.BuildId).zip .
          
          echo "üìÑ Package contents:"
          unzip -l ../$(lambdaFunctionName)-$(Build.BuildId).zip | head -20
          
          echo "üöÄ Deploying Lambda function to AWS..."
          export AWS_DEFAULT_REGION=$(AWS_REGION)
          
          # Check if function exists and deploy
          if aws lambda get-function --function-name $(lambdaFunctionName) 2>/dev/null; then
            echo "üìù Updating existing Lambda function: $(lambdaFunctionName)"
            aws lambda update-function-code \
              --function-name $(lambdaFunctionName) \
              --zip-file fileb://$(Build.ArtifactStagingDirectory)/$(lambdaFunctionName)-$(Build.BuildId).zip
            
            echo "‚öôÔ∏è Updating function configuration..."
            aws lambda update-function-configuration \
              --function-name $(lambdaFunctionName) \
              --runtime dotnet8 \
              --timeout 30 \
              --memory-size 256
          else
            echo "üÜï Creating new Lambda function: $(lambdaFunctionName)"
            aws lambda create-function \
              --function-name $(lambdaFunctionName) \
              --runtime dotnet8 \
              --role $(AWS_LAMBDA_ROLE_ARN) \
              --handler "KD.Function.Customer.ValidationAccounts::KD.Function.Customer.ValidationAccounts.Function::FunctionHandler" \
              --zip-file fileb://$(Build.ArtifactStagingDirectory)/$(lambdaFunctionName)-$(Build.BuildId).zip \
              --timeout 30 \
              --memory-size 256 \
              --description "lambda-customer-validation-accounts Lambda function deployed from Azure DevOps"
          fi
          
          echo "‚úÖ Lambda function deployed successfully!"
          
          # Display function information
          echo "üìã Function details:"
          aws lambda get-function --function-name $(lambdaFunctionName) \
            --query 'Configuration.[FunctionName,Runtime,LastModified,CodeSize,Timeout,MemorySize]' \
            --output table
          
          echo "üéØ Deployment completed for $(lambdaFunctionName)"
